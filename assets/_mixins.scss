/*============================================================================
  Grid Breakpoints and Class Names
    - Do not change the variable names
    - $grid-narrow is based on a Shopify breakpoint for checkout buttons
==============================================================================*/
$grid-narrow: 400px;
$grid-medium: 750px;
$grid-large: 990px;
$grid-ex-large:1200px;
$grid-widescreen: 1400px;
$grid-gutter: 30px;
$grid-gutter-mobile: 22px;

$narrowish: 'narrow';
$narrow: 'narrow';
$not-narrow: 'not-narrow';
$small: 'small';
$medium: 'medium';
$medium-down: 'medium-down';
$medium-up: 'medium-up';
$large: 'large';
$large-down: 'large-down';
$large-up: 'large-up';
$ex-large: 'ex-large';
$ex-large-up: 'ex-large-up';
$widescreen: 'widescreen';

/*============================================================================
  Generate breakpoint-specific column widths and push classes
    - Default column widths: $grid-breakpoint-has-widths: ($small, $medium-up);
    - Default is no push classes
==============================================================================*/
$grid-breakpoint-has-widths: ($narrow, $not-narrow, $small, $medium-up, $medium, $medium-down, $large, $large-up, $large-down, $ex-large, $ex-large-up);
$grid-breakpoint-has-push: $grid-breakpoint-has-widths;



/*============================================================================
  #Grid
==============================================================================*/

// The `$grid-breakpoints` list is used to build our media queries.
// You can use these in the mq mixin.
$grid-breakpoints: (
    $narrow '(max-width: #{$grid-narrow})',
    $not-narrow '(min-width: #{$grid-narrow + 1}) and (max-width: #{$grid-medium - 1})',
    $small '(max-width: #{$grid-medium - 1})',
    $medium '(min-width: #{$grid-medium}) and (max-width: #{$grid-large - 1})',
    $medium-down '(max-width: #{$grid-large - 1})',
    $medium-up '(min-width: #{$grid-medium})',
    $large '(min-width: #{$grid-large}) and (max-width: #{$grid-ex-large - 1})',
    $large-down '(max-width: #{$grid-ex-large - 1})',
    $large-up '(min-width: #{$grid-large})',
    $ex-large '(min-width: #{$grid-ex-large}) and (max-width: #{$grid-widescreen - 1})',
    $ex-large-up '(min-width: #{$grid-ex-large})',
    $widescreen '(min-width: #{$grid-widescreen})'
);



@mixin mq($mq) {
  $breakpoint-found: false;

  @each $breakpoint in $grid-breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $mq == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }

  @if $breakpoint-found == false {
    @warn 'Breakpoint "#{$mq}" does not exist';
  }
}


// scss doesn't like min() and max(), so use these mixins to fix
@function css-function( $function, $values... ) {
  @return 
    $function
    + unquote( '(' )
    + $values
    + unquote( ')' )
  ;
}

@function css-min( $values... ) {
  @return css-function( min, $values );
}

@function css-max( $values... ) {
  @return css-function( max, $values );
}


@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix==webkit {
      -webkit-#{$property}: $value;
    }

    @else if $prefix==moz {
      -moz-#{$property}: $value;
    }

    @else if $prefix==ms {
      -ms-#{$property}: $value;
    }

    @else if $prefix==o {
      -o-#{$property}: $value;
    }

    @else if $prefix==spec {
      #{$property}: $value;
    }

    @else {
      @warn 'unrecognized prefix: #{$prefix}';
    }
  }
}


%u-sr-only,
%visually-hidden {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
  word-wrap: normal !important;
}


@mixin placeholder-text {
  ::-webkit-input-placeholder {
      @content;
  }
  ::-moz-placeholder {
      @content;
  }
  ::-o-placeholder {
      @content;
  }
  ::-ms-input-placeholder {
      @content;
  }
}
{"version":3,"sources":["section-email-signup-banner.scss","_mixins.scss"],"names":[],"mappings":"AAAA,2FAEA,oBAAA,CCoEM,0CDhEN,iFACA,UAAA,CAAA,CAIA,wDACA,eAAA,CAGA,oDACA,eAAA,CAGA,oDACA,QAAA,CAGA,gCACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,QAAA,CACA,0BAAA,CC0CM,0CDtCN,uGACA,4BAAA,CACA,iCAAA,CACA,6BAAA,CACA,4BAAA,CAAA,CCkCM,0CD7BN,mEACA,iCAAA,CAGA,qEACA,4BAAA,CAGA,+EACA,yDAAA,CAGA,qFACA,yDAAA,CAGA,8FACA,qDAAA,CACA,qGAAA,CAAA,CCWM,0CDLN,uCACA,YAAA,CAAA,CCIM,0CDCN,4EACA,YAAA,CAAA,CAIA,oCACA,eAAA,CCPM,0CDWN,6DACA,0BAAA,CAGA,8DACA,qBAAA,CAAA,CChBM,0CDqBN,wDACA,sBAAA,CAGA,uDACA,qBAAA,CAAA","file":"section-email-signup-banner.css","sourcesContent":["@import '../assets/mixins';.email-signup-banner .newsletter-form,\n.email-signup-banner .newsletter-form__field-wrapper {\n  display: inline-block;\n}\n\n@include mq($medium-up) {\n  .email-signup-banner:not(.banner--desktop-transparent) .email-signup-banner__box {\n    width: 100%;\n  }\n}\n\n.email-signup-banner__box .email-signup-banner__heading {\n  margin-bottom: 0;\n}\n\n.email-signup-banner__box > * + .newsletter__subheading {\n  margin-top: 2rem;\n}\n\n.email-signup-banner__box .newsletter__subheading p {\n  margin: 0;\n}\n\n.email-signup-banner-background {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n@include mq($small) {\n  .email-signup-banner:not(.banner--mobile-bottom) .banner__box:not(.email-signup-banner__box--no-image) {\n    background-color: transparent;\n    --color-foreground: 255, 255, 255;\n    --color-button: 255, 255, 255;\n    --color-button-text: 0, 0, 0;\n  }\n}\n\n@include mq($medium-up) {\n  .banner--desktop-transparent .email-signup-banner__box--no-image * {\n    color: rgb(var(--color-base-text));\n  }\n\n  .banner--desktop-transparent .email-signup-banner__box .field__input {\n    background-color: transparent;\n  }\n\n  .banner--desktop-transparent .email-signup-banner__box--no-image .field__input {\n    box-shadow: 0 0 0 0.1rem rgba(var(--color-base-text), 0.55);\n  }\n\n  .banner--desktop-transparent .email-signup-banner__box--no-image .field__input:focus {\n    box-shadow: 0 0 0 0.2rem rgba(var(--color-base-text), 0.75);\n  }\n\n  .banner--desktop-transparent .email-signup-banner__box--no-image .field__button:focus-visible {\n    outline: 0.2rem solid rgba(var(--color-base-text), 0.5);\n    box-shadow: 0 0 0 0.3rem rgb(var(--color-background)),\n      0 0 0.5rem 0.4rem rgba(var(--color-base-text), 0.3);\n  }\n}\n\n@include mq($medium-up) {\n  .email-signup-banner-background-mobile {\n    display: none;\n  }\n}\n\n@include mq($small) {\n  .email-signup-banner-background:not(.email-signup-banner-background-mobile) {\n    display: none;\n  }\n}\n\n.email-signup-banner .banner__media {\n  overflow: hidden;\n}\n\n@include mq($small) {\n  .banner--mobile-content-align-left .newsletter-form__message {\n    justify-content: flex-start;\n  }\n\n  .banner--mobile-content-align-right .newsletter-form__message {\n    justify-content: right;\n  }\n}\n\n@include mq($medium-up) {\n  .banner--content-align-center .newsletter-form__message {\n    justify-content: center;\n  }\n\n  .banner--content-align-right .newsletter-form__message {\n    justify-content: right;\n  }\n}\n","/*============================================================================\n  Grid Breakpoints and Class Names\n    - Do not change the variable names\n    - $grid-narrow is based on a Shopify breakpoint for checkout buttons\n==============================================================================*/\n$grid-narrow: 400px;\n$grid-medium: 750px;\n$grid-large: 990px;\n$grid-ex-large:1200px;\n$grid-widescreen: 1400px;\n$grid-gutter: 30px;\n$grid-gutter-mobile: 22px;\n\n$narrowish: 'narrow';\n$narrow: 'narrow';\n$not-narrow: 'not-narrow';\n$small: 'small';\n$medium: 'medium';\n$medium-down: 'medium-down';\n$medium-up: 'medium-up';\n$large: 'large';\n$large-down: 'large-down';\n$large-up: 'large-up';\n$ex-large: 'ex-large';\n$ex-large-up: 'ex-large-up';\n$widescreen: 'widescreen';\n\n/*============================================================================\n  Generate breakpoint-specific column widths and push classes\n    - Default column widths: $grid-breakpoint-has-widths: ($small, $medium-up);\n    - Default is no push classes\n==============================================================================*/\n$grid-breakpoint-has-widths: ($narrow, $not-narrow, $small, $medium-up, $medium, $medium-down, $large, $large-up, $large-down, $ex-large, $ex-large-up);\n$grid-breakpoint-has-push: $grid-breakpoint-has-widths;\n\n\n\n/*============================================================================\n  #Grid\n==============================================================================*/\n\n// The `$grid-breakpoints` list is used to build our media queries.\n// You can use these in the mq mixin.\n$grid-breakpoints: (\n    $narrow '(max-width: #{$grid-narrow})',\n    $not-narrow '(min-width: #{$grid-narrow + 1}) and (max-width: #{$grid-medium - 1})',\n    $small '(max-width: #{$grid-medium - 1})',\n    $medium '(min-width: #{$grid-medium}) and (max-width: #{$grid-large - 1})',\n    $medium-down '(max-width: #{$grid-large - 1})',\n    $medium-up '(min-width: #{$grid-medium})',\n    $large '(min-width: #{$grid-large}) and (max-width: #{$grid-ex-large - 1})',\n    $large-down '(max-width: #{$grid-ex-large - 1})',\n    $large-up '(min-width: #{$grid-large})',\n    $ex-large '(min-width: #{$grid-ex-large}) and (max-width: #{$grid-widescreen - 1})',\n    $ex-large-up '(min-width: #{$grid-ex-large})',\n    $widescreen '(min-width: #{$grid-widescreen})'\n);\n\n\n\n@mixin mq($mq) {\n  $breakpoint-found: false;\n\n  @each $breakpoint in $grid-breakpoints {\n    $name: nth($breakpoint, 1);\n    $declaration: nth($breakpoint, 2);\n\n    @if $mq == $name and $declaration {\n      $breakpoint-found: true;\n\n      @media only screen and #{$declaration} {\n        @content;\n      }\n    }\n  }\n\n  @if $breakpoint-found == false {\n    @warn 'Breakpoint \"#{$mq}\" does not exist';\n  }\n}\n\n\n// scss doesn't like min() and max(), so use these mixins to fix\n@function css-function( $function, $values... ) {\n  @return \n    $function\n    + unquote( '(' )\n    + $values\n    + unquote( ')' )\n  ;\n}\n\n@function css-min( $values... ) {\n  @return css-function( min, $values );\n}\n\n@function css-max( $values... ) {\n  @return css-function( max, $values );\n}\n\n\n@mixin prefix($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix==webkit {\n      -webkit-#{$property}: $value;\n    }\n\n    @else if $prefix==moz {\n      -moz-#{$property}: $value;\n    }\n\n    @else if $prefix==ms {\n      -ms-#{$property}: $value;\n    }\n\n    @else if $prefix==o {\n      -o-#{$property}: $value;\n    }\n\n    @else if $prefix==spec {\n      #{$property}: $value;\n    }\n\n    @else {\n      @warn 'unrecognized prefix: #{$prefix}';\n    }\n  }\n}\n\n\n%u-sr-only,\n%visually-hidden {\n  position: absolute !important;\n  overflow: hidden;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n  clip: rect(0 0 0 0);\n  word-wrap: normal !important;\n}\n\n\n@mixin placeholder-text {\n  &::-webkit-input-placeholder {\n      @content;\n  }\n  &::-moz-placeholder {\n      @content;\n  }\n  &::-o-placeholder {\n      @content;\n  }\n  &::-ms-input-placeholder {\n      @content;\n  }\n}"]}
{"version":3,"sources":["product-form.js"],"names":["customElements","get","define","HTMLElement","constructor","super","this","form","querySelector","sampleButton","addEventListener","onSampleSubmitHandler","bind","disabled","onSubmitHandler","cart","document","submitButtons","querySelectorAll","forEach","btn","setAttribute","hideErrors","dataset","setToLoading","classList","add","remove","sendRequest","evt","formData","config","fetch","routes","cart_add_url","then","response","json","quickAddModal","status","publish","PUB_SUB_EVENTS","cartError","source","productVariantId","errors","description","message","handleErrorMessage","soldOutMessage","target","error","cartUpdate","closest","items","sections","textContent","body","setTimeout","renderContents","once","hide","window","location","cart_url","catch","console","e","finally","removeAttribute","contains","updateCartIcon","preventDefault","getAttribute","fetchConfig","headers","FormData","id","quantity","getSectionsToRender","map","section","sections_url","pathname","setActiveElement","activeElement","append","JSON","stringify","errorMessage","errorMessageWrapper","toggleAttribute","text","header","sourceQty","DOMParser","parseFromString","responseText","cartItem","index"],"mappings":"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","file":"product-form.min.js","sourcesContent":["if (!customElements.get('product-form')) {\n  customElements.define(\n    'product-form',\n    class ProductForm extends HTMLElement {\n      constructor() {\n        super();\n\n        this.form = this.querySelector('form');\n        this.sampleButton = this.querySelector('[id^=SampleOrderButton]');\n        this.sampleButton?.addEventListener(\n          'click',\n          this.onSampleSubmitHandler.bind(this)\n        );\n        this.form.querySelector('[name=id]').disabled = false;\n        this.querySelector('[type=\"submit\"]')?.addEventListener('click', this.onSubmitHandler.bind(this));\n        this.cart =\n          document.querySelector('cart-notification') ||\n          document.querySelector('cart-drawer');\n        this.submitButtons = this.querySelectorAll('.product-form__submit');\n        if (document.querySelector('cart-drawer'))\n          this.submitButtons.forEach((btn) =>\n            btn.setAttribute('aria-haspopup', 'dialog')\n          );\n\n        this.hideErrors = this.dataset.hideErrors === 'true';\n      }\n\n      setToLoading() {\n        this.submitButtons.forEach((btn) => {\n          btn.setAttribute('aria-disabled', true);\n          btn.classList.add('loading');\n          btn\n            .querySelector('.loading-overlay__spinner')\n            .classList.remove('hidden');\n        });\n      }\n\n      sendRequest(evt,formData,config) {\n        fetch(`${routes.cart_add_url}`, config)\n          .then((response) => response.json())\n          .then((response) => {\n            if (response.status) {\n              publish(PUB_SUB_EVENTS.cartError, {\n                source: 'product-form',\n                productVariantId: formData.get('id'),\n                errors: response.description,\n                message: response.message,\n              });\n              this.handleErrorMessage(response.description);\n\n              const soldOutMessage =\n                evt.target.querySelector('.sold-out-message');\n              if (!soldOutMessage) return;\n              this.submitButtons.forEach((btn) => {\n                btn.setAttribute('aria-disabled', true);\n                btn.querySelector('span').classList.add('hidden');\n              });\n              soldOutMessage.classList.remove('hidden');\n              this.error = true;\n              return;\n            } else if (!this.cart) {\n              window.location = window.routes.cart_url;\n              return;\n            }\n\n            if (!this.error)\n              publish(PUB_SUB_EVENTS.cartUpdate, {\n                source: 'product-form',\n                productVariantId: formData.get('id'),\n              });\n            this.error = false;\n            const quickAddModal = this.closest('quick-add-modal');\n\n            if(response.items){\n              response.items[0].sections = response.sections\n              response = response.items[0]\n              \n              if (evt.target == this.sampleButton) {\n                evt.target.querySelector('span > span').textContent = 'Added to Cart'\n                evt.target.setAttribute('disabled',true)\n              }\n            }\n            \n            if (quickAddModal) {\n              document.body.addEventListener(\n                'modalClosed',\n                () => {\n                  setTimeout(() => {\n                    this.cart.renderContents(response);\n                  });\n                },\n                { once: true }\n              );\n              quickAddModal.hide(true);\n            } else {\n              this.cart.renderContents(response);\n            }\n          })\n          .catch((e) => {\n            console.error(e);\n          })\n          .finally(() => {\n            this.submitButtons.forEach((btn) => {\n              btn.classList.remove('loading');\n              if (!this.error) btn.removeAttribute('aria-disabled');\n              btn\n                .querySelector('.loading-overlay__spinner')\n                .classList.add('hidden');\n            });\n            if (this.cart && this.cart.classList.contains('is-empty'))\n              this.cart.classList.remove('is-empty');\n            this.updateCartIcon();\n          });\n      }\n\n      onSampleSubmitHandler(evt) {\n        evt.preventDefault();\n        if (evt.target.getAttribute('data-value') == null) return;\n        if (evt.target.getAttribute('aria-disabled') === 'true') return;\n\n        const config = fetchConfig('javascript');\n        config.headers['X-Requested-With'] = 'XMLHttpRequest';\n\n        this.handleErrorMessage();\n        this.setToLoading();\n\n        const formData = new FormData();\n        const body = {items:[{ id: evt.target.getAttribute('data-value'),quantity:1 }]}\n        if (this.cart) {\n          body.sections = this.cart.getSectionsToRender().map((section) => section.id)\n          body.sections_url = window.location.pathname\n          this.cart.setActiveElement(document.activeElement);\n        }\n        formData.append('items', [{ id: evt.target.getAttribute('data-value'),quantity:1 }]);\n        config.body = JSON.stringify(body);\n        this.sendRequest(evt,formData,config)\n      }\n\n      onSubmitHandler(evt) {\n        evt.preventDefault();\n        if (evt.target.getAttribute('aria-disabled') === 'true') return;\n\n        this.handleErrorMessage();\n        this.setToLoading();\n\n        const config = fetchConfig('javascript');\n        config.headers['X-Requested-With'] = 'XMLHttpRequest';\n        delete config.headers['Content-Type'];\n\n        const formData = new FormData(this.form);\n        if (this.cart) {\n          formData.append(\n            'sections',\n            this.cart.getSectionsToRender().map((section) => section.id)\n          );\n          formData.append('sections_url', window.location.pathname);\n          this.cart.setActiveElement(document.activeElement);\n        }\n        config.body = formData;\n        this.sendRequest(evt,formData,config);\n      }\n\n      handleErrorMessage(errorMessage = false) {\n        if (this.hideErrors) return;\n\n        this.errorMessageWrapper =\n          this.errorMessageWrapper ||\n          this.querySelector('.product-form__error-message-wrapper');\n        if (!this.errorMessageWrapper) return;\n        this.errorMessage =\n          this.errorMessage ||\n          this.errorMessageWrapper.querySelector(\n            '.product-form__error-message'\n          );\n\n        this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);\n\n        if (errorMessage) {\n          this.errorMessage.textContent = errorMessage;\n        }\n      }\n\n      updateCartIcon() {\n        fetch(`${routes.cart_url}?section_id=custom-cart-counter`)\n          .then((response) => response.text())\n          .then((responseText) => {\n            const header = document.querySelector('header');\n            const html = new DOMParser().parseFromString(\n              responseText,\n              'text/html'\n            );\n            const sourceQty = html.querySelector('#itemCount').textContent;\n            const cartItems = header.querySelectorAll('.menu-item__name-cart');\n\n            cartItems.forEach(function (cartItem, index) {\n              cartItem.querySelector('#itemCount').textContent = sourceQty;\n            });\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n      }\n    }\n  );\n}\n"]}
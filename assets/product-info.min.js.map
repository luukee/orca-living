{"version":3,"sources":["product-info.js"],"names":["customElements","get","define","HTMLElement","constructor","super","this","input","querySelector","currentVariant","variantSelects","submitButton","cartUpdateUnsubscriber","undefined","variantChangeUnsubscriber","connectedCallback","quantityForm","setQuantityBoundries","dataset","originalSection","subscribe","PUB_SUB_EVENTS","cartUpdate","fetchQuantityRules","bind","variantChange","sectionId","section","event","data","updateQuantityRules","html","disconnectedCallback","cartQuantity","parseInt","min","max","step","let","Math","paver","value","setAttribute","publish","quantityUpdate","classList","remove","fetch","url","then","response","text","DOMParser","parseFromString","responseText","catch","e","console","error","finally","add","selector","quantityFormUpdated","getElementById","attribute","current","updated","valueUpdated","getAttribute","innerHTML"],"mappings":"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","file":"product-info.min.js","sourcesContent":["if (!customElements.get('product-info')) {\n  customElements.define('product-info', class ProductInfo extends HTMLElement {\n    constructor() {\n      super();\n      this.input = this.querySelector('.quantity__input');\n      this.currentVariant = this.querySelector('.product-variant-id');\n      this.variantSelects = this.querySelector('variant-radios')\n      this.submitButton = this.querySelector('[type=\"submit\"]');\n    }\n\n    cartUpdateUnsubscriber = undefined;\n    variantChangeUnsubscriber = undefined;\n\n    connectedCallback() {\n      if (!this.input) return;\n      this.quantityForm = this.querySelector('.product-form__quantity');\n      if (!this.quantityForm) return;\n      this.setQuantityBoundries();  \n      if (!this.dataset.originalSection) {\n        this.cartUpdateUnsubscriber = subscribe(PUB_SUB_EVENTS.cartUpdate, this.fetchQuantityRules.bind(this));\n      }\n      this.variantChangeUnsubscriber = subscribe(PUB_SUB_EVENTS.variantChange, (event) => {\n        const sectionId = this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section;\n        if (event.data.sectionId !== sectionId) return;\n        this.updateQuantityRules(event.data.sectionId, event.data.html);\n        this.setQuantityBoundries();\n      });\n    }\n\n    disconnectedCallback() {\n      if (this.cartUpdateUnsubscriber) {\n        this.cartUpdateUnsubscriber();\n      }\n      if (this.variantChangeUnsubscriber) {\n        this.variantChangeUnsubscriber();\n      }\n    }\n\n    setQuantityBoundries() {\n      const data = {\n        cartQuantity: this.input.dataset.cartQuantity ? parseInt(this.input.dataset.cartQuantity) : 0,\n        min: this.input.dataset.min ? parseInt(this.input.dataset.min) : 1,\n        max: this.input.dataset.max ? parseInt(this.input.dataset.max) : null,\n        step: this.input.step ? parseInt(this.input.step) : 1\n      }\n\n      let min = data.min;\n      const max = data.max === null ? data.max : data.max - data.cartQuantity;\n      if (max !== null) min = Math.min(min, max);\n      if (data.cartQuantity >= data.min) min = Math.min(min, data.step);\n\n      this.input.min = min;\n      this.input.max = max;\n\n      if (this.dataset.paver) {\n        this.input.value = min\n      }\n\n      if (min == 0) {\n        this.submitButton.setAttribute('disabled','true')\n      }\n\n      publish(PUB_SUB_EVENTS.quantityUpdate, undefined);  \n    }\n\n    fetchQuantityRules() {\n      if (!this.currentVariant || !this.currentVariant.value) return;\n      this.querySelector('.quantity__rules-cart .loading-overlay').classList.remove('hidden');\n      fetch(`${this.dataset.url}?variant=${this.currentVariant.value}&section_id=${this.dataset.section}`).then((response) => {\n        return response.text()\n      })\n      .then((responseText) => {\n        const html = new DOMParser().parseFromString(responseText, 'text/html');\n        this.updateQuantityRules(this.dataset.section, html);\n        this.setQuantityBoundries();\n      })\n      .catch(e => {\n        console.error(e);\n      })\n      .finally(() => {\n        this.querySelector('.quantity__rules-cart .loading-overlay').classList.add('hidden');\n      });\n    }\n\n    updateQuantityRules(sectionId, html) {\n      const quantityFormUpdated = html.getElementById(`Quantity-Form-${sectionId}`);\n      const selectors = ['.quantity__input', '.quantity__rules', '.quantity__label'];\n      for (let selector of selectors) { \n        const current = this.quantityForm.querySelector(selector);\n        const updated = quantityFormUpdated.querySelector(selector);\n        if (!current || !updated) continue;\n        if (selector === '.quantity__input') {\n          const attributes = ['data-cart-quantity', 'data-min', 'data-max', 'step','data-pallet-qty'];\n          for (let attribute of attributes) {\n            const valueUpdated = updated.getAttribute(attribute);\n            if (valueUpdated !== null) current.setAttribute(attribute, valueUpdated);\n          }\n        } else {\n          current.innerHTML = updated.innerHTML;\n        }\n      }\n    }\n  }\n)};\n\n\n\n"]}
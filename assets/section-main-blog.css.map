{"version":3,"sources":["section-main-blog.css"],"names":[],"mappings":"AAAA,eACA,YAAA,CACA,aAAA,CACA,qDAAA,CAAA,gDAAA,CACA,2CAAA,CAGA,6BACA,UAAA,CC8DM,0CDzDN,eACA,6BAAA,CACA,sDAAA,CAAA,iDAAA,CACA,4CAAA,CAGA,+FAEA,kBAAA,CACA,iBAAA,CAGA,2GAEA,iBAAA,CAGA,qLAEA,oBAAA,CAGA,uLAEA,oBAAA,CAGA,qLAEA,oBAAA,CAAA,CC4BM,0CDvBN,eACA,iCAAA,CACA,aAAA,CAGA,mMAEA,sBAAA,CAGA,uLAEA,oBAAA,CAGA,qLAEA,sBAAA,CAAA,CAOA,cACA,mCAAA,CACA,eAAA","file":"section-main-blog.css","sourcesContent":["@import '../assets/mixins';.blog-articles {\n  display: grid;\n  grid-gap: 1rem;\n  column-gap: var(--grid-mobile-horizontal-spacing);\n  row-gap: var(--grid-mobile-vertical-spacing);\n}\n\n.blog-articles .card-wrapper {\n  width: 100%;\n}\n\n\n@include mq($medium-up) {\n  .blog-articles {\n    grid-template-columns: 1fr 1fr;\n    column-gap: var(--grid-desktop-horizontal-spacing);\n    row-gap: var(--grid-desktop-vertical-spacing); \n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1),\n  .blog-articles--collage > *:nth-child(3n + 2):last-child {\n    grid-column: span 2;\n    text-align: center;\n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1) .card,\n  .blog-articles--collage > *:nth-child(3n + 2):last-child .card {\n    text-align: center;\n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1) .article-card__image--small .ratio::before,\n  .blog-articles--collage > *:nth-child(3n + 2):last-child .article-card__image--small .ratio::before {\n    padding-bottom: 22rem;\n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1) .article-card__image--medium .ratio::before,\n  .blog-articles--collage > *:nth-child(3n + 2):last-child .article-card__image--medium .ratio::before {\n    padding-bottom: 44rem;\n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1) .article-card__image--large .ratio::before,\n  .blog-articles--collage > *:nth-child(3n + 2):last-child .article-card__image--large .ratio::before {\n    padding-bottom: 66rem;\n  }\n}\n\n@include mq($large-up) {\n  .blog-articles {\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-gap: 30px;\n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1) .article-card__image--small .ratio .ratio::before,\n  .blog-articles--collage > *:nth-child(3n + 2):last-child .article-card__image--small .ratio .ratio::before {\n    padding-bottom: 27.5rem;\n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1) .article-card__image--medium .ratio::before,\n  .blog-articles--collage > *:nth-child(3n + 2):last-child .article-card__image--medium .ratio::before {\n    padding-bottom: 55rem;\n  }\n\n  .blog-articles--collage > *:nth-child(3n + 1) .article-card__image--large .ratio::before,\n  .blog-articles--collage > *:nth-child(3n + 2):last-child .article-card__image--large .ratio::before {\n    padding-bottom: 82.5rem;\n  }\n}\n\n\n\n.main-blog {\n  h1 {\n    margin: 0 0 var(--base-gutter--half);\n    line-height: 1.1;\n  }\n}","/*============================================================================\n  Grid Breakpoints and Class Names\n    - Do not change the variable names\n    - $grid-narrow is based on a Shopify breakpoint for checkout buttons\n==============================================================================*/\n$grid-narrow: 400px;\n$grid-medium: 750px;\n$grid-large: 990px;\n$grid-ex-large:1200px;\n$grid-widescreen: 1400px;\n$grid-gutter: 30px;\n$grid-gutter-mobile: 22px;\n\n$narrowish: 'narrow';\n$narrow: 'narrow';\n$not-narrow: 'not-narrow';\n$small: 'small';\n$medium: 'medium';\n$medium-down: 'medium-down';\n$medium-up: 'medium-up';\n$large: 'large';\n$large-down: 'large-down';\n$large-up: 'large-up';\n$ex-large: 'ex-large';\n$ex-large-up: 'ex-large-up';\n$widescreen: 'widescreen';\n\n/*============================================================================\n  Generate breakpoint-specific column widths and push classes\n    - Default column widths: $grid-breakpoint-has-widths: ($small, $medium-up);\n    - Default is no push classes\n==============================================================================*/\n$grid-breakpoint-has-widths: ($narrow, $not-narrow, $small, $medium-up, $medium, $medium-down, $large, $large-up, $large-down, $ex-large, $ex-large-up);\n$grid-breakpoint-has-push: $grid-breakpoint-has-widths;\n\n\n\n/*============================================================================\n  #Grid\n==============================================================================*/\n\n// The `$grid-breakpoints` list is used to build our media queries.\n// You can use these in the mq mixin.\n$grid-breakpoints: (\n    $narrow '(max-width: #{$grid-narrow})',\n    $not-narrow '(min-width: #{$grid-narrow + 1}) and (max-width: #{$grid-medium - 1})',\n    $small '(max-width: #{$grid-medium - 1})',\n    $medium '(min-width: #{$grid-medium}) and (max-width: #{$grid-large - 1})',\n    $medium-down '(max-width: #{$grid-large - 1})',\n    $medium-up '(min-width: #{$grid-medium})',\n    $large '(min-width: #{$grid-large}) and (max-width: #{$grid-ex-large - 1})',\n    $large-down '(max-width: #{$grid-ex-large - 1})',\n    $large-up '(min-width: #{$grid-large})',\n    $ex-large '(min-width: #{$grid-ex-large}) and (max-width: #{$grid-widescreen - 1})',\n    $ex-large-up '(min-width: #{$grid-ex-large})',\n    $widescreen '(min-width: #{$grid-widescreen})'\n);\n\n\n\n@mixin mq($mq) {\n  $breakpoint-found: false;\n\n  @each $breakpoint in $grid-breakpoints {\n    $name: nth($breakpoint, 1);\n    $declaration: nth($breakpoint, 2);\n\n    @if $mq == $name and $declaration {\n      $breakpoint-found: true;\n\n      @media only screen and #{$declaration} {\n        @content;\n      }\n    }\n  }\n\n  @if $breakpoint-found == false {\n    @warn 'Breakpoint \"#{$mq}\" does not exist';\n  }\n}\n\n\n// scss doesn't like min() and max(), so use these mixins to fix\n@function css-function( $function, $values... ) {\n  @return \n    $function\n    + unquote( '(' )\n    + $values\n    + unquote( ')' )\n  ;\n}\n\n@function css-min( $values... ) {\n  @return css-function( min, $values );\n}\n\n@function css-max( $values... ) {\n  @return css-function( max, $values );\n}\n\n\n@mixin prefix($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix==webkit {\n      -webkit-#{$property}: $value;\n    }\n\n    @else if $prefix==moz {\n      -moz-#{$property}: $value;\n    }\n\n    @else if $prefix==ms {\n      -ms-#{$property}: $value;\n    }\n\n    @else if $prefix==o {\n      -o-#{$property}: $value;\n    }\n\n    @else if $prefix==spec {\n      #{$property}: $value;\n    }\n\n    @else {\n      @warn 'unrecognized prefix: #{$prefix}';\n    }\n  }\n}\n\n\n%u-sr-only,\n%visually-hidden {\n  position: absolute !important;\n  overflow: hidden;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n  clip: rect(0 0 0 0);\n  word-wrap: normal !important;\n}\n\n\n@mixin placeholder-text {\n  ::-webkit-input-placeholder {\n      @content;\n  }\n  ::-moz-placeholder {\n      @content;\n  }\n  ::-o-placeholder {\n      @content;\n  }\n  ::-ms-input-placeholder {\n      @content;\n  }\n}"]}
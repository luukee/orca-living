<!-- snippets/navigation-secondary.liquid -->

{% liquid 
  assign secondary_menu_type_desktop = section.settings.secondary_menu_type_desktop
  assign makeh1                      = section.settings.make_h1
  
  assign heading_element    = 'h2'
  if makeh1 == true and template.name == 'collection'
    assign heading_element  = 'h1'
  endif
  
  # Get the secondary menu using the handle
  assign secondary_menu = linklists[section.settings.secondary_menu_handle]
%}

<div class="gradient page-width section--navigation navigation-secondary header-wrapper--border-bottom">
  <div class="section-{{ section.id }}-padding">

    {% if section.settings.title %}
      <{{heading_element}} class="h4">{{section.settings.title}}</{{heading_element}}>
    {% endif %}

    <!-- Mobile Navigation Drawer -->
    {% comment %} <div class="navigation-mobile">
      <navigation-drawer>
        <details id="Details-navigation-drawer-container" class="navigation-drawer-container">
          <summary class="navigation-drawer__toggle" aria-label="{{ 'sections.header.menu' | t }}">
            <span>
              {% render 'icon-hamburger' %}
              {% render 'icon-close' %}
            </span>
          </summary>
          <div id="navigation-drawer" class="navigation-drawer" tabindex="-1">
            <div class="navigation-drawer__inner-container">
              <div class="navigation-drawer__header">
                <h2 class="navigation-drawer__title">
                  {% if section.settings.title %}
                    {{ section.settings.title }}
                  {% else %}
                    {{ 'sections.header.menu' | t }}
                  {% endif %}
                </h2>
                <button type="button" class="navigation-drawer__close-button link link--text focus-inset" aria-label="{{ 'accessibility.close' | t }}">
                  {% render 'icon-close' %}
                </button>
              </div>
              <div class="navigation-drawer__navigation-container">
                <nav class="navigation-drawer__navigation">
                  <ul class="navigation-drawer__menu" role="list">
                    {%- for link in secondary_menu.links -%}
                      {% liquid 
                        assign is_current          = false 
                        assign link_handle         = link.handle 

                        assign collection_handle   = collection.handle
                        
                        # Fallback: get collection handle from URL if collection.handle is not correct
                        if collection_handle == 'all' or collection_handle == blank
                          assign path_parts = request.path | split: '/'
                          for part in path_parts
                            if part == 'collections' and forloop.index < path_parts.size
                              assign collection_handle = path_parts[forloop.index]
                              break
                            endif
                          endfor
                        endif 
                        capture collection_url 
                          render 'snippet--url-query', queryString: 'collection'
                        endcapture
                        if collection_url != ''
                          if link.url contains collection_url
                            assign is_current      = true 
                          endif
                        endif

                        if link.current
                          assign is_current        = true 
                        endif 

                        if collection_handle == link_handle
                          assign is_current        = true
                        endif 

                        if collection_handle == 'quick-ship' and link_handle == 'pavers'
                          assign is_current        = true
                        endif

                        assign link_url            = link.url
                        if is_current and template.name != 'article'
                          assign link_url          = link_url | split: '/tagged' | first
                        endif 

                        # Check article tags only if we're on an article page and article exists
                        if template.name == 'article' and article.tags.size > 0
                          assign link_handle_for_tags = link.url | handleize
                          for tag in article.tags
                            assign tag_handle = tag | handleize 
                            if link_handle_for_tags contains tag_handle
                              assign is_current = true
                              break
                            endif 
                          endfor
                        endif 

                        assign child_link_size      = link.links | size
                        
                        assign path = request.path
                        assign show_nav_child_links = false
                        if path contains 'pavers' or path contains 'quick-ship'
                          assign show_nav_child_links = true
                        endif
                      %}
                      <li>
                        <a href="{{ link_url }}" class="navigation-drawer__menu-item link link--text focus-inset{% if is_current %} navigation-drawer__menu-item--active{% endif %}"{% if is_current %} aria-current="page"{% endif %}>
                          {{ link.title | escape }}
                        </a>
                        {% if is_current %}
                          {%- if child_link_size > 0 and template.name == 'collection' or show_nav_child_links -%}
                            <ul class="navigation-drawer__submenu" role="list">
                              {%- for childlink in link.links -%}
                                {% liquid 
                                  assign is_current_inner     = false
                                  assign tagged_handle       = ''
                                  for tag in current_tags
                                    assign tagged_handle     = tag | handleize | replace: '_',''
                                  endfor 
                                  assign current_child_link   = childlink.handle | handleize | replace: '_',''
                                  if current_child_link contains tagged_handle and tagged_handle != ''
                                    assign is_current_inner   = true
                                  endif

                                %}
                                <li>
                                  <a href="{{ childlink.url }}" class="navigation-drawer__menu-item link link--text focus-inset {% if is_current_inner %} navigation-drawer__menu-item--active{% endif %}">
                                    {{ childlink.title | escape }}
                                  </a>
                                </li>
                              {%- endfor -%}  
                            </ul>          
                          {%- endif -%}            
                        {% endif %}
                      </li>
                    {%- endfor -%}
                  </ul>
                </nav>
              </div>
            </div>
          </div>
        </details>
      </navigation-drawer>
    </div> {% endcomment %}
    <!-- Desktop Navigation -->
    <div class="navigation-desktop">
      <ul class="list-menu" role="list">
        {%- for link in secondary_menu.links -%}
          {% liquid 
            assign is_current          = false 
            assign link_handle         = link.handle 

            assign collection_handle   = collection.handle
            
            # Fallback: get collection handle from URL if collection.handle is not correct
            if collection_handle == 'all' or collection_handle == blank
              assign path_parts = request.path | split: '/'
              for part in path_parts
                if part == 'collections' and forloop.index < path_parts.size
                  assign collection_handle = path_parts[forloop.index]
                  break
                endif
              endfor
            endif
            
            # Debug collection info
            # if link.title == 'Pavers'
            #   echo ' | collection.title=' | append: collection.title | append: ' collection.id=' | append: collection.id | append: ' path_collection=' | append: collection_handle
            # endif 
            capture collection_url 
              render 'snippet--url-query', queryString: 'collection'
            endcapture
            
            # Debug output - remove after fixing
            # if link.title == 'Pavers'
            #   echo 'DEBUG: link_handle=' | append: link_handle | append: ' collection_handle=' | append: collection_handle | append: ' collection_url=' | append: collection_url | append: ' link.current=' | append: link.current | append: ' link.url=' | append: link.url
            # endif
            
            if collection_url != ''
              if link.url contains collection_url
                assign is_current      = true 
              endif
            endif

            if link.current
              assign is_current        = true 
            endif 

            if collection_handle == link_handle
              assign is_current        = true
            endif 

            if collection_handle == 'quick-ship' and link_handle == 'pavers'
              assign is_current        = true
            endif
            
            # Temporary test - remove after debugging
            if link.title == 'Pavers' and collection_handle == 'pavers'
              assign is_current = true
            endif

            assign link_url            = link.url
            if is_current and template.name != 'article'
              assign link_url          = link_url | split: '/tagged' | first
            endif 

            # Check article tags only if we're on an article page and article exists
            if template.name == 'article' and article.tags.size > 0
              assign link_handle_for_tags = link.url | handleize
              for tag in article.tags
                assign tag_handle = tag | handleize 
                if link_handle_for_tags contains tag_handle
                  assign is_current = true
                  break
                endif 
              endfor
            endif 

            assign child_link_size      = link.links | size
            
            assign path = request.path
            assign show_nav_child_links = false
            if path contains 'pavers' or path contains 'quick-ship'
              assign show_nav_child_links = true
            endif
            
            # Debug final is_current value - remove after fixing
            # if link.title == 'Pavers'
            #   echo ' | is_current=' | append: is_current
            # endif
          %}
          <li>
            {%- comment -%} Check if this link should have a mega menu {%- endcomment -%}
            {%- assign has_mega_menu = false -%}
            {%- assign mega_menu_content = null -%}
            {%- assign collection_handle = null -%}
            
            {%- comment -%} Only show mega menu if secondary_menu_type_desktop is set to 'mega' {%- endcomment -%}
            {%- if secondary_menu_type_desktop == 'mega' -%}
              {%- if link.url contains '/collections/' -%}
                {%- assign collection_handle = link.url | split: '/collections/' | last | split: '/' | first -%}
                {%- if collection_handle -%}
                  {%- assign collection = collections[collection_handle] -%}
                  {%- if collection and collection.metafields.custom.mega_menu_content != blank -%}
                    {%- assign mega_menu_content = collection.metafields.custom.mega_menu_content.value -%}
                    {%- if mega_menu_content.image != blank or mega_menu_content.categories != blank or mega_menu_content.materials != blank or mega_menu_content.use_cases != blank -%}
                      {%- assign has_mega_menu = true -%}
                    {%- endif -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endif -%}
            {%- endif -%}
            {%- if has_mega_menu -%}
              {%- comment -%} Mega menu version {%- endcomment -%}
              <header-menu>
                {% comment %} Keep this open for Pavers: {% if link.title == 'Pavers' %}open{% endif %} {% endcomment %}
                <details id="Details-SecondaryMenu-{{ forloop.index }}" class="mega-menu">
                  <summary class="list-menu__item link link--text focus-inset{% if is_current %} menu-item--active{% endif %}"{% if is_current %} aria-current="page"{% endif %}>
                    {% comment %} {% if is_current and template.name == 'collection' %}<h1>{% endif %} {% endcomment %}
                    {{ link.title | escape }}
                    {% comment %} {% if is_current and template.name == 'collection' %}</h1>{% endif %} {% endcomment %}
                  </summary>
                  <div id="SecondaryMenu-Content-{{ forloop.index }}" class="mega-menu__content gradient motion-reduce global-settings-popup" tabindex="-1">
                    <div class="mega-menu__rich-content">

                      {%- comment -%} Categories/tags - Dynamically pulled from product tags {%- endcomment -%}
                      {% if mega_menu_content.hide_categories != true %}
                        <div class="mega-menu__content-column mega-menu--categories">
                          {%- comment -%} Get unique tags from all products in the collection {%- endcomment -%}
                          {%- assign unique_tags = '' -%}
                          {%- assign excluded_tags = '' -%}
                          
                          {%- comment -%} Get excluded tags from metaobject {%- endcomment -%}
                          {%- if mega_menu_content.categories != blank -%}
                            {%- assign excluded_tags = mega_menu_content.categories | split: ',' -%}
                          {%- endif -%}
                          
                          {%- for product in collection.products -%}
                            {%- for tag in product.tags -%}
                              {%- assign should_exclude = false -%}
                              {%- comment -%} Check if tag should be excluded (case-insensitive) {%- endcomment -%}
                              {%- for excluded_tag in excluded_tags -%}
                                {%- assign excluded_tag_clean = excluded_tag | strip -%}
                                {%- assign tag_lower = tag | downcase -%}
                                {%- assign excluded_tag_lower = excluded_tag_clean | downcase -%}
                                {%- if tag_lower == excluded_tag_lower or tag_lower contains excluded_tag_lower -%}
                                  {%- assign should_exclude = true -%}
                                  {%- break -%}
                                {%- endif -%}
                              {%- endfor -%}
                              
                              {%- unless should_exclude -%}
                                {%- unless unique_tags contains tag -%}
                                  {%- if unique_tags == blank -%}
                                    {%- assign unique_tags = tag -%}
                                  {%- else -%}
                                    {%- assign unique_tags = unique_tags | append: ',' | append: tag -%}
                                  {%- endif -%}
                                {%- endunless -%}
                              {%- endunless -%}
                            {%- endfor -%}
                          {%- endfor -%}
                          
                          {%- if unique_tags != blank -%}
                            <h3 class="mega-menu__column-title">Category</h3>
                            <ul class="mega-menu__column-list">
                              {%- assign tags_list = unique_tags | split: ',' | sort -%}
                              {%- for tag in tags_list -%}
                                <li class="mega-menu__column-item">
                                  {%- comment -%} Create URL-friendly handle for collection filtering {%- endcomment -%}
                                  {%- assign category_handle = tag | strip | replace: ' ', '-' -%}
                                  {%- unless category_handle contains '_' -%}
                                    {%- assign category_handle = '_' | append: category_handle -%}
                                  {%- endunless -%}
                                  
                                  {%- comment -%} Format display text: remove underscores/dashes and capitalize all words {%- endcomment -%}
                                  {%- assign display_text = tag | strip | replace: '_', '' | replace: '-', ' ' -%}
                                  
                                  {%- comment -%} Special case: rename "_Quick ship" to "In Stock" {%- endcomment -%}
                                  {%- if display_text == 'Quick ship' -%}
                                    {%- assign display_text = 'In Stock' -%}
                                  {%- else -%}
                                    {%- assign words = display_text | split: ' ' -%}
                                    {%- assign display_text = '' -%}
                                    {%- for word in words -%}
                                      {%- assign capitalized_word = word | capitalize -%}
                                      {%- if display_text == blank -%}
                                        {%- assign display_text = capitalized_word -%}
                                      {%- else -%}
                                        {%- assign display_text = display_text | append: ' ' | append: capitalized_word -%}
                                      {%- endif -%}
                                    {%- endfor -%}
                                  {%- endif -%}
                                  
                                  {%- comment -%} Create clickable link with formatted display text {%- endcomment -%}
                                  <a href="{{ link.url }}/{{ category_handle }}" class="mega-menu__column-link">{{ display_text }}</a>
                                </li>
                              {%- endfor -%}
                            </ul>
                          {%- endif -%}
                        </div>
                      {% endif %}
                      
                      {% comment %} Materials - Dynamically pulled from product metafields {% endcomment %}
                      {% if mega_menu_content.hide_materials != true %}
                      <div class="mega-menu__content-column mega-menu--materials">
                        {%- comment -%} Get unique materials from all products in the collection {%- endcomment -%}
                        {%- assign unique_materials = '' -%}
                        {%- assign excluded_materials = '' -%}
                        
                        {%- comment -%} Get excluded materials from metaobject {%- endcomment -%}
                        {%- if mega_menu_content.materials != blank -%}
                          {%- assign excluded_materials = mega_menu_content.materials | split: ',' -%}
                        {%- endif -%}
                        
                        {%- for product in collection.products -%}
                          {%- comment -%} First try to get materials from variant options {%- endcomment -%}
                          {%- assign has_variant_materials = false -%}
                          {%- for variant in product.variants -%}
                            {%- comment -%} Check if this variant has a material option {%- endcomment -%}
                            {%- for option in product.options -%}
                              {%- if option == 'Material' -%}
                                {%- assign has_variant_materials = true -%}
                                <!-- Has variant materials==> {{ has_variant_materials }} -->
                                {%- assign option_index = forloop.index0 -%}
                                {%- assign material = variant.options[option_index] | strip -%}
                                {%- if material != blank -%}
                                  {%- assign should_exclude = false -%}
                                  
                                  {%- comment -%} Check if material should be excluded {%- endcomment -%}
                                  {%- for excluded_material in excluded_materials -%}
                                    {%- assign excluded_material_clean = excluded_material | strip -%}
                                    {%- if material == excluded_material_clean or material contains excluded_material_clean -%}
                                      {%- assign should_exclude = true -%}
                                      {%- break -%}
                                    {%- endif -%}
                                  {%- endfor -%}
                                  
                                  {%- unless should_exclude -%}
                                    {%- comment -%} Check for case-insensitive duplicates {%- endcomment -%}
                                    {%- assign material_lower = material | downcase -%}
                                    {%- assign unique_materials_lower = unique_materials | downcase -%}
                                    {%- unless unique_materials_lower contains material_lower -%}
                                      {%- if unique_materials == blank -%}
                                        {%- assign unique_materials = material -%}
                                      {%- else -%}
                                        {%- assign unique_materials = unique_materials | append: ',' | append: material -%}
                                      {%- endif -%}
                                    {%- endunless -%}
                                  {%- endunless -%}
                                {%- endif -%}
                                {%- break -%}
                              {%- endif -%}
                            {%- endfor -%}
                          {%- endfor -%}
                          
                          {%- comment -%} Fallback to product metafields if no variant materials found {%- endcomment -%}
                          {%- unless has_variant_materials -%}
                            {%- if product.metafields.custom.material != blank -%}
                              {%- comment -%} Handle both single values and list values {%- endcomment -%}
                              {%- if product.metafields.custom.material.value.first -%}
                                {%- comment -%} It's a list of values {%- endcomment -%}
                                {%- for material_item in product.metafields.custom.material.value -%}
                                  {%- assign material = material_item | strip -%}
                                  {%- assign should_exclude = false -%}
                                  
                                  {%- comment -%} Check if material should be excluded {%- endcomment -%}
                                  {%- for excluded_material in excluded_materials -%}
                                    {%- assign excluded_material_clean = excluded_material | strip -%}
                                    {%- if material == excluded_material_clean or material contains excluded_material_clean -%}
                                      {%- assign should_exclude = true -%}
                                      {%- break -%}
                                    {%- endif -%}
                                  {%- endfor -%}
                                  
                                  {%- unless should_exclude -%}
                                    {%- comment -%} Check for case-insensitive duplicates {%- endcomment -%}
                                    {%- assign material_lower = material | downcase -%}
                                    {%- assign unique_materials_lower = unique_materials | downcase -%}
                                    {%- unless unique_materials_lower contains material_lower -%}
                                      {%- if unique_materials == blank -%}
                                        {%- assign unique_materials = material -%}
                                      {%- else -%}
                                        {%- assign unique_materials = unique_materials | append: ',' | append: material -%}
                                      {%- endif -%}
                                    {%- endunless -%}
                                  {%- endunless -%}
                                {%- endfor -%}
                              {%- else -%}
                                {%- comment -%} It's a single value {%- endcomment -%}
                                {%- assign material = product.metafields.custom.material.value | strip -%}
                                {%- assign should_exclude = false -%}
                                
                                {%- comment -%} Check if material should be excluded {%- endcomment -%}
                                {%- for excluded_material in excluded_materials -%}
                                  {%- assign excluded_material_clean = excluded_material | strip -%}
                                  {%- if material == excluded_material_clean or material contains excluded_material_clean -%}
                                    {%- assign should_exclude = true -%}
                                    {%- break -%}
                                  {%- endif -%}
                                {%- endfor -%}
                                
                                {%- unless should_exclude -%}
                                  {%- comment -%} Check for case-insensitive duplicates {%- endcomment -%}
                                  {%- assign material_lower = material | downcase -%}
                                  {%- assign unique_materials_lower = unique_materials | downcase -%}
                                  {%- unless unique_materials_lower contains material_lower -%}
                                    {%- if unique_materials == blank -%}
                                      {%- assign unique_materials = material -%}
                                    {%- else -%}
                                      {%- assign unique_materials = unique_materials | append: ',' | append: material -%}
                                    {%- endif -%}
                                  {%- endunless -%}
                                {%- endunless -%}
                              {%- endif -%}
                            {%- endif -%}
                          {%- endunless -%}
                        {%- endfor -%}
                        
                        {%- comment -%} Determine filter type based on data source {%- endcomment -%}
                        {%- assign material_filter_type = 'filter.v.option.material' -%}
                        {%- if has_variant_materials == false -%}
                          {%- comment -%} Check if materials come from product metafields (not variant metafields) {%- endcomment -%}
                          {%- assign has_product_metafield_materials = false -%}
                          {%- for product in collection.products limit: 1 -%}
                            {%- if product.metafields.custom.material != blank -%}
                              {%- assign has_product_metafield_materials = true -%}
                            {%- endif -%}
                          {%- endfor -%}
                          
                          {%- if has_product_metafield_materials -%}
                            {%- assign material_filter_type = 'filter.p.m.custom.material' -%}
                          {%- else -%}
                            {%- assign material_filter_type = 'filter.v.m.custom.material' -%}
                          {%- endif -%}
                        {%- endif -%}
                        
                        {%- if unique_materials != blank -%}
                          <h3 class="mega-menu__column-title">Material</h3>
                          <ul class="mega-menu__column-list">
                            {%- assign materials_list = unique_materials | split: ',' -%}
                                                      
                            {%- for material in materials_list -%}
                              <li class="mega-menu__column-item">
                                <a href="{{ link.url }}?{{ material_filter_type }}={{ material | strip | url_encode }}" class="mega-menu__column-link">
                                  {{ material | strip | capitalize | escape }}
                                </a>
                              </li>
                            {%- endfor -%}
                          </ul>
                        {%- endif -%}
                      </div>
                      {% endif %}
                      
                      {% comment %} Use Cases - Dynamically pulled from product metafields {% endcomment %}
                      {% if mega_menu_content.hide_use_cases != true %}
                      <div class="mega-menu__content-column mega-menu--use-cases">
                        {%- comment -%} Get unique use cases from all products in the collection {%- endcomment -%}
                        {%- assign unique_use_cases = '' -%}
                        {%- assign excluded_use_cases = '' -%}
                        
                        {%- comment -%} Get excluded use cases from metaobject {%- endcomment -%}
                        {%- if mega_menu_content.use_cases != blank -%}
                          {%- assign excluded_use_cases = mega_menu_content.use_cases | split: ',' -%}
                        {%- endif -%}
                        
                        {%- for product in collection.products -%}
                          {%- comment -%} First try to get use cases from variant metafields {%- endcomment -%}
                          {%- assign has_variant_use_cases = false -%}
                          {%- for variant in product.variants -%}
                            {%- if variant.metafields.custom.use_case != blank -%}
                              {%- assign has_variant_use_cases = true -%}
                              {%- comment -%} Handle both single values and list values {%- endcomment -%}
                              {%- if variant.metafields.custom.use_case.value.first -%}
                                {%- comment -%} It's a list of values {%- endcomment -%}
                                {%- for use_case_item in variant.metafields.custom.use_case.value -%}
                                  {%- assign use_case = use_case_item | strip -%}
                                  {%- assign should_exclude = false -%}
                                  
                                  {%- comment -%} Check if use case should be excluded {%- endcomment -%}
                                  {%- for excluded_use_case in excluded_use_cases -%}
                                    {%- assign excluded_use_case_clean = excluded_use_case | strip -%}
                                    {%- if use_case == excluded_use_case_clean or use_case contains excluded_use_case_clean -%}
                                      {%- assign should_exclude = true -%}
                                      {%- break -%}
                                    {%- endif -%}
                                  {%- endfor -%}
                                  
                                  {%- unless should_exclude -%}
                                    {%- unless unique_use_cases contains use_case -%}
                                      {%- if unique_use_cases == blank -%}
                                        {%- assign unique_use_cases = use_case -%}
                                      {%- else -%}
                                        {%- assign unique_use_cases = unique_use_cases | append: ',' | append: use_case -%}
                                      {%- endif -%}
                                    {%- endunless -%}
                                  {%- endunless -%}
                                {%- endfor -%}
                              {%- else -%}
                                {%- comment -%} It's a single value {%- endcomment -%}
                                {%- assign use_case = variant.metafields.custom.use_case.value | strip -%}
                                {%- assign should_exclude = false -%}
                                
                                {%- comment -%} Check if use case should be excluded {%- endcomment -%}
                                {%- for excluded_use_case in excluded_use_cases -%}
                                  {%- assign excluded_use_case_clean = excluded_use_case | strip -%}
                                  {%- if use_case == excluded_use_case_clean or use_case contains excluded_use_case_clean -%}
                                    {%- assign should_exclude = true -%}
                                    {%- break -%}
                                  {%- endif -%}
                                {%- endfor -%}
                                
                                {%- unless should_exclude -%}
                                  {%- unless unique_use_cases contains use_case -%}
                                    {%- if unique_use_cases == blank -%}
                                      {%- assign unique_use_cases = use_case -%}
                                    {%- else -%}
                                      {%- assign unique_use_cases = unique_use_cases | append: ',' | append: use_case -%}
                                    {%- endif -%}
                                  {%- endunless -%}
                                {%- endunless -%}
                              {%- endif -%}
                            {%- endif -%}
                          {%- endfor -%}
                          
                          {%- comment -%} Fallback to product metafields if no variant use cases found {%- endcomment -%}
                          {%- unless has_variant_use_cases -%}
                            {%- if product.metafields.custom.use_case != blank -%}
                              {%- comment -%} Handle both single values and list values {%- endcomment -%}
                              {%- if product.metafields.custom.use_case.value.first -%}
                                {%- comment -%} It's a list of values {%- endcomment -%}
                                {%- for use_case_item in product.metafields.custom.use_case.value -%}
                                  {%- assign use_case = use_case_item | strip -%}
                                  {%- assign should_exclude = false -%}
                                  
                                  {%- comment -%} Check if use case should be excluded {%- endcomment -%}
                                  {%- for excluded_use_case in excluded_use_cases -%}
                                    {%- assign excluded_use_case_clean = excluded_use_case | strip -%}
                                    {%- if use_case == excluded_use_case_clean or use_case contains excluded_use_case_clean -%}
                                      {%- assign should_exclude = true -%}
                                      {%- break -%}
                                    {%- endif -%}
                                  {%- endfor -%}
                                  
                                  {%- unless should_exclude -%}
                                    {%- unless unique_use_cases contains use_case -%}
                                      {%- if unique_use_cases == blank -%}
                                        {%- assign unique_use_cases = use_case -%}
                                      {%- else -%}
                                        {%- assign unique_use_cases = unique_use_cases | append: ',' | append: use_case -%}
                                      {%- endif -%}
                                    {%- endunless -%}
                                  {%- endunless -%}
                                {%- endfor -%}
                              {%- else -%}
                                {%- comment -%} It's a single value {%- endcomment -%}
                                {%- assign use_case = product.metafields.custom.use_case.value | strip -%}
                                {%- assign should_exclude = false -%}
                                
                                {%- comment -%} Check if use case should be excluded {%- endcomment -%}
                                {%- for excluded_use_case in excluded_use_cases -%}
                                  {%- assign excluded_use_case_clean = excluded_use_case | strip -%}
                                  {%- if use_case == excluded_use_case_clean or use_case contains excluded_use_case_clean -%}
                                    {%- assign should_exclude = true -%}
                                    {%- break -%}
                                  {%- endif -%}
                                {%- endfor -%}
                                
                                {%- unless should_exclude -%}
                                  {%- unless unique_use_cases contains use_case -%}
                                    {%- if unique_use_cases == blank -%}
                                      {%- assign unique_use_cases = use_case -%}
                                    {%- else -%}
                                      {%- assign unique_use_cases = unique_use_cases | append: ',' | append: use_case -%}
                                    {%- endif -%}
                                  {%- endunless -%}
                                {%- endunless -%}
                              {%- endif -%}
                            {%- endif -%}
                          {%- endunless -%}
                        {%- endfor -%}
                        
                        {%- if unique_use_cases != blank -%}
                          <h3 class="mega-menu__column-title">Use Case</h3>
                          <ul class="mega-menu__column-list">
                            {%- assign use_cases_list = unique_use_cases | split: ',' -%}
                            {%- for use_case in use_cases_list -%}
                              <li class="mega-menu__column-item">
                                <a href="{{ link.url }}?filter.v.m.custom.use_case={{ use_case | strip | url_encode }}" class="mega-menu__column-link">{{ use_case | strip | capitalize | escape }}</a>
                              </li>
                            {%- endfor -%}
                          </ul>
                        {%- endif -%}
                      </div>
                      {% endif %}
                      
                      <div class="mega-menu__content-column mega-menu__content-column--image">
                        {%- if mega_menu_content.image != blank -%}
                          <div class="mega-menu__image-container">
                            {%- assign image_url = mega_menu_content.image | image_url: width: 400, height: 400 -%}
                            <img src="{{ image_url }}" 
                                 alt="{{ mega_menu_content.image_alt | default: link.title | escape }}" 
                                 class="mega-menu__image"
                                 width="400" 
                                 height="400"
                                 loading="lazy">
                          </div>
                        {%- endif -%}
                        {%- if mega_menu_content.cta_text != blank and mega_menu_content.cta_url != blank -%}
                          <a href="{{ mega_menu_content.cta_url }}" class="mega-menu__cta-link">
                            {{ mega_menu_content.cta_text | escape }}
                          </a>
                        {%- else -%}
                          <a href="{{ link.url }}" class="mega-menu__cta-link">
                            Shop all {{ link.title | downcase }} >
                          </a>
                        {%- endif -%}
                      </div>
                    </div>
                  </div>
                </details>
              </header-menu>
            {%- elsif secondary_menu_type_desktop == 'dropdown' and child_link_size > 0 -%}
              {%- comment -%} Dropdown menu version {%- endcomment -%}
              <header-menu>
                <details id="Details-SecondaryMenu-{{ forloop.index }}" class="mega-menu">
                  <summary class="list-menu__item link link--text focus-inset{% if is_current %} menu-item--active{% endif %}"{% if is_current %} aria-current="page"{% endif %}>
                    {% if is_current and template.name == 'collection' %}<h1>{% endif %}
                    {{ link.title | escape }}
                    {% if is_current and template.name == 'collection' %}</h1>{% endif %}
                    <svg aria-hidden="true" focusable="false" class="icon icon-caret" viewBox="0 0 10 6">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z" fill="currentColor"></path>
                    </svg>
                  </summary>
                  <div id="SecondaryMenu-Content-{{ forloop.index }}" class="mega-menu__content gradient motion-reduce global-settings-popup" tabindex="-1">
                    <ul class="mega-menu__list list-menu" role="list">
                      {%- for childlink in link.links -%}
                        <li>
                          <a href="{{ childlink.url }}" class="mega-menu__link link link--text list-menu__item focus-inset{% if childlink.current %} menu-item--active{% endif %}"{% if childlink.current %} aria-current="page"{% endif %}>
                            {{ childlink.title | escape }}
                          </a>
                        </li>
                      {%- endfor -%}
                    </ul>
                  </div>
                </details>
              </header-menu>
            {%- else -%}
              {%- comment -%} Regular link version {%- endcomment -%}
              <a href="{{ link_url }}" class="list-menu__item link link--text focus-inset{% if is_current %} menu-item--active{% endif %}"{% if is_current %} aria-current="page"{% endif %}>
                {% if is_current and template.name == 'collection' %}<h1>{% endif %}
                {{ link.title | escape }}
                {% if is_current and template.name == 'collection' %}</h1>{% endif %}
              </a>
            {%- endif -%}
          </li>
        {%- endfor -%}
      </ul>
    </div>

  </div>
</div>

<script>
  class NavigationDrawer extends HTMLElement {
    constructor() {
      super();
      this.drawer = this.querySelector('#navigation-drawer');
      this.toggle = this.querySelector('.navigation-drawer__toggle');
      this.closeButton = this.querySelector('.navigation-drawer__close-button');
      this.details = this.querySelector('details');
      this.bindEvents();
    }

    bindEvents() {
      // Let the details element handle the toggle naturally
      this.closeButton.addEventListener('click', this.closeDrawer.bind(this));
      
      // Close drawer when clicking outside
      this.drawer.addEventListener('click', (event) => {
        if (event.target === this.drawer) {
          this.closeDrawer();
        }
      });

      // Close drawer on escape key
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && this.isOpen()) {
          this.closeDrawer();
        }
      });

      // Listen for details toggle to sync our custom state
      this.details.addEventListener('toggle', (event) => {
        if (event.target.open) {
          // Details was opened, add our custom active class
          this.drawer.classList.add('active');
          this.toggle.setAttribute('aria-expanded', 'true');
          document.body.style.overflow = 'hidden';
        } else {
          // Details was closed, remove our custom active class
          this.drawer.classList.remove('active');
          this.toggle.setAttribute('aria-expanded', 'false');
          document.body.style.overflow = '';
        }
      });
    }

    closeDrawer() {
      this.details.removeAttribute('open');
    }

    isOpen() {
      return this.details.hasAttribute('open');
    }
  }

  customElements.define('navigation-drawer', NavigationDrawer);
</script> 